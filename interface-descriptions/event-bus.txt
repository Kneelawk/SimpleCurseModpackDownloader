The event bus sends a start signal to its creator.
When the creator receives the start signal, it is passed a reference to the event bus.
The event bus can have event listeners registered with it.
When an event bus receives an event, it notifies all event listeners listening for that type of event.
Events can be anything, usually case classes.
Will there be different types of event bus? A task event bus and a normal one?

QUESION: Should I try to make sure event busses are type-specified.
Type-specified event busses would be individual classes for each set of events.
Type-specified event busses would likely require macros for ease of creation.

Pros of type-specified event busses:
Event type safety.
You know what possible events can be fired.

Cons of type-specified event busses:
Seperate classes for each set of events.
Requires macros for non-tedious implementation.

This kind of event bus might morph more into a task builder.

I'm having too much trouble implementing a system that uses different kinds of event busses for different kinds of tasks.
I'm needing to be able to throw events that are only specified in AbstractTask, making the need for some kind of way to
have all event busses that are used in an AbstractTask to all have some common events. Things are getting messy.